# -*- coding: utf-8 -*-

import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes, ConversationHandler
from bot.keyboards import get_main_menu_keyboard, get_marketplace_keyboard, get_services_keyboard, get_calculation_result_keyboard, get_ai_chat_keyboard
from bot.messages import MESSAGES
from bot.calculator import FulfillmentCalculator
from bot.ai_assistant import AIAssistant
from bot.states import (
    MARKETPLACE_CHOICE, ORDERS_COUNT, SERVICES_CHOICE, CALCULATION_RESULT,
    APPLICATION_NAME, APPLICATION_CONTACT, APPLICATION_DESCRIPTION, AI_CHAT
)
from utils.formatters import format_calculation_result

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = MESSAGES['welcome'].format(name=user.first_name)
    
    keyboard = get_main_menu_keyboard()
    logo_path = "assets/logo.png"
    
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        if os.path.exists(logo_path):
            with open(logo_path, 'rb') as logo_file:
                await update.message.reply_photo(
                    photo=logo_file,
                    caption=welcome_text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        else:
            await update.message.reply_text(
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        text=MESSAGES['help'],
        parse_mode='HTML'
    )

async def company_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(
        text=MESSAGES['company_info'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def services_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(
        text=MESSAGES['services_info'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def advantages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(
        text=MESSAGES['advantages'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        await start(update, context)
    elif query.data == "company_info":
        await company_info(update, context)
    elif query.data == "services":
        await services_info(update, context)
    elif query.data == "advantages":
        await advantages(update, context)
    elif query.data == "ai_chat":
        await handle_ai_chat_start(update, context)
    elif query.data == "ai_examples":
        await handle_ai_examples(update, context)
    elif query.data == "ai_ask_question":
        await handle_ai_ask_question(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
async def handle_calculator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    keyboard = get_marketplace_keyboard()
    
    await query.edit_message_text(
        text=MESSAGES['calculator_start'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    return MARKETPLACE_CHOICE

async def handle_marketplace_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    marketplace = query.data.replace("marketplace_", "")
    context.user_data['marketplace'] = marketplace
    
    marketplace_names = {
        'wildberries': 'Wildberries',
        'ozon': 'Ozon',
        'yandex': '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç'
    }
    
    text = MESSAGES['orders_count'].format(marketplace=marketplace_names.get(marketplace, marketplace))
    
    await query.edit_message_text(
        text=text,
        parse_mode='HTML'
    )
    
    return ORDERS_COUNT

async def handle_orders_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        orders_count = int(update.message.text)
        if orders_count <= 0:
            raise ValueError()
        
        context.user_data['orders_count'] = orders_count
        
        keyboard = get_services_keyboard()
        
        await update.message.reply_text(
            text=MESSAGES['services_choice'],
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return SERVICES_CHOICE
        
    except ValueError:
        await update.message.reply_text(
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )
        return ORDERS_COUNT

async def handle_services_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "service_calculate":
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = FulfillmentCalculator()
        
        marketplace = context.user_data.get('marketplace')
        orders_count = context.user_data.get('orders_count')
        selected_services = context.user_data.get('selected_services', [])
        
        result = calculator.calculate(marketplace, orders_count, selected_services)
        context.user_data['calculation_result'] = result
        
        formatted_result = format_calculation_result(result, marketplace, orders_count, selected_services)
        keyboard = get_calculation_result_keyboard()
        
        await query.edit_message_text(
            text=formatted_result,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return CALCULATION_RESULT
    
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        service = query.data.replace("service_", "")
        selected_services = context.user_data.get('selected_services', [])
        
        if service in selected_services:
            selected_services.remove(service)
        else:
            selected_services.append(service)
        
        context.user_data['selected_services'] = selected_services
        
        keyboard = get_services_keyboard(selected_services)
        
        await query.edit_message_text(
            text=MESSAGES['services_choice'],
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return SERVICES_CHOICE

async def handle_calculation_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "calc_new":
        # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        context.user_data.clear()
        keyboard = get_marketplace_keyboard()
        
        await query.edit_message_text(
            text=MESSAGES['calculator_start'],
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return MARKETPLACE_CHOICE
    
    elif query.data == "calc_application":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏
        await query.edit_message_text(
            text=MESSAGES['application_start'],
            parse_mode='HTML'
        )
        
        return APPLICATION_NAME
    
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def handle_application_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text=MESSAGES['application_start'],
        parse_mode='HTML'
    )
    
    return APPLICATION_NAME

async def handle_application_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è"""
    context.user_data['application_name'] = update.message.text
    
    await update.message.reply_text(
        text=MESSAGES['application_contact'],
        parse_mode='HTML'
    )
    
    return APPLICATION_CONTACT

async def handle_application_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    context.user_data['application_contact'] = update.message.text
    
    await update.message.reply_text(
        text=MESSAGES['application_description'],
        parse_mode='HTML'
    )
    
    return APPLICATION_DESCRIPTION

async def handle_application_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π"""
    context.user_data['application_description'] = update.message.text
    
    await handle_application_complete(update, context)
    return ConversationHandler.END

async def handle_application_complete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await update.message.reply_text(
        text=MESSAGES['application_complete'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
async def handle_ai_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    query = update.callback_query
    await query.answer()
    
    keyboard = get_ai_chat_keyboard()
    
    await query.edit_message_text(
        text=MESSAGES['ai_chat_welcome'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    return AI_CHAT

async def handle_ai_examples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI"""
    query = update.callback_query
    await query.answer()
    
    keyboard = get_ai_chat_keyboard()
    
    await query.edit_message_text(
        text=MESSAGES['ai_examples'],
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    return AI_CHAT

async def handle_ai_ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É AI"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="ü§ñ <b>–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.",
        parse_mode='HTML'
    )
    
    return AI_CHAT

async def handle_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ AI"""
    user_message = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await update.message.chat.send_action(action="typing")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
        ai_assistant = AIAssistant()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç)
        user_context = {}
        if 'calculation_result' in context.user_data:
            user_context['last_calculation'] = context.user_data['calculation_result']
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await ai_assistant.get_response(user_message, user_context)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
                InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="application")
            ],
            [
                InlineKeyboardButton("‚ùì –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ai_ask_question"),
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        await update.message.reply_text(
            text=f"ü§ñ <b>AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{ai_response}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AI_CHAT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞: {e}")
        
        keyboard = get_ai_chat_keyboard()
        
        await update.message.reply_text(
            text="‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º.\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏ –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AI_CHAT
